/*
 * robotCtrl.c: Robot control and movement data collection
 * Author: Stephanie Kunkel
 */
#include "robotCtrl.h"
/*
 * Collect Robot Movement Data
 */
int collectRobotMvmtData(unsigned int sampleTime, unsigned int calibrationTime) {
	//Variables
	MpuRegisterData *dataStart, *dataColl, *print;
	unsigned long cnt = 0, samples = 0, printcnt = 0;
	int status;
	Joint joint = wrist;
	float angle[2];

	//Set angles
	angle[0] = 90.0;
	angle[1] = 0.0;

	//Compute number of data samples
	samples = sampleTime * FIFO_RATE;

	//Allocate Memory
	dataStart = (MpuRegisterData*) 0x7000000; //(MpuRegisterData*) malloc((samples + 200) * sizeof(MpuRegisterData));

	//Set Print Pointer
	dataColl = dataStart;
	print = dataStart;

	//Initialize
	status = initIMU(calibrationTime);
	if (status != XST_SUCCESS) {
		printf("Could not initialize IMU.\r\n");
		return PWM_FAILURE;
	}

	//Read out some data sets before sampling starts
	//	for (cnt = 0; cnt < CAL_IGNORE_SAMPLES; cnt++) {
	//		if (needToUpdateData() == BOOL_TRUE) {
	//
	//			//Read Sensor Data and write to memory
	//			status = readFromRegs(dataColl->gyro, dataColl->accel,
	//					dataColl->compass, &dataColl->temp, 0, SENSORS_ALL);
	//		}
	//	}

	//Reset Robot
	status = reset();
	if (status != PWM_SUCCESS){
		return PWM_FAILURE;
	}

	//Reset cnt
	cnt = 0;

	//Get Samples
	while (cnt < samples) {

		//Move Robot
		if(cnt %2 == 0){
			setAngle(joint, angle[0]);
		} else {
			setAngle(joint, angle[1]);
		}


		//Get Sensor Data
		if (needToUpdateData() == BOOL_TRUE) {

			//Read Sensor Data and write to memory
			status = readFromRegs(dataColl->gyro, dataColl->accel,
					dataColl->compass, &dataColl->temp, 0, SENSORS_ALL);

			//Read successful?
			if (status == XST_SUCCESS) {
				//LED Run
				ledRun();

				//Store count value
				//				data->cnt = (u16) cnt;

				//Increase count
				cnt++;

				//Go to next data set
				if (cnt < samples) {
					dataColl++;
				}
			}
		}
	}

	//Print samples
	for (printcnt = 0; printcnt < cnt; printcnt++) {
		//Print
		//		printf("%d ", print->cnt);
		printRaw(print->gyro);
		printf(" ");
		printRaw(print->accel);
		printf(" ");
		printRaw(print->compass);
		printf(" %ld;", print->temp);

		//Increase Pointer Address
		print++;
	}

	//Return
	return PWM_SUCCESS;
}
