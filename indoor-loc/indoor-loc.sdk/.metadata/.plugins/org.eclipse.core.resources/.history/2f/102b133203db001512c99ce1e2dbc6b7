/*
 * dataBuffer.c: Robot control and movement data collection
 * Author: Stephanie Kunkel
 */

/*
 * Includes
 */
#include "dataBuffer.h"

/*
 * Global Vairables
 */
static unsigned char* bufCurr = BUF_ADDR;

/*
 * Store in Buffer
 */
void storeInBuff(RobotMpuData* data) {
	//Store PWM Values in buffer
	*bufCurr = (unsigned char) (data->pwmValues[0] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[0] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[0] & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[0] & BYTE3) >> 24);
	bufCurr++;
	*bufCurr = (unsigned char) (data->pwmValues[1] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[1] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[1] & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[1] & BYTE3) >> 24);
	bufCurr++;
	*bufCurr = (unsigned char) (data->pwmValues[1] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[2] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[2] & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[2] & BYTE3) >> 24);
	bufCurr++;
	*bufCurr = (unsigned char) (data->pwmValues[3] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[3] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[3] & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[3] & BYTE3) >> 24);
	bufCurr++;
	*bufCurr = (unsigned char) (data->pwmValues[4] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[4] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[4] & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[4] & BYTE3) >> 24);
	bufCurr++;
	*bufCurr = (unsigned char) (data->pwmValues[5] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[5] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[5] & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->pwmValues[5] & BYTE3) >> 24);
	bufCurr++;

	//Store MPU Data in buffer
	*bufCurr = (unsigned char) (data->mpuData.gyro[0] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.gyro[0] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.gyro[1] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.gyro[1] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.gyro[2] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.gyro[2] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.accel[0] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.accel[0] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.accel[1] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.accel[1] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.accel[2] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.accel[2] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.compass[0] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.compass[0] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.compass[1] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.compass[1] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.compass[2] & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.compass[2] & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) (data->mpuData.temp & BYTE0);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.temp & BYTE1) >> 8);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.temp & BYTE2) >> 16);
	bufCurr++;
	*bufCurr = (unsigned char) ((data->mpuData.temp & BYTE3) >> 24);
	bufCurr++;
}

/*
 * Transmit Buffer
 */
