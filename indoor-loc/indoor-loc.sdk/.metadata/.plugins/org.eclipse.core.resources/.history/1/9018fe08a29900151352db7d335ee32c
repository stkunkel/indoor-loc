/*
 * run.c: Main Program
 * Author: Stephanie Kunkel
 */

/*
 * Includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "platform.h"
#include "print_utils.h"
#include "imu/mpu.h"
#include "robot/pwmsw.h"
#include "xtime_l.h"

/*
 * Defines
 */
#define DATA_NO_DMP_RUNS 	10
#define DATA_WITH_DMP_RUNS 	10
#define PWM_RUNS 			10

/*
 * Function Prototypes
 */
int printDataWithoutDMP(short int* sensors, unsigned int numberOfRuns);
int printDataUsingDMP(char initialCalibration, char dmpCalibration,
		unsigned int numberOfRuns);

void printQuatForImuViewer(int cnt, int status, int i) {
	//	//Quaternion Drift
	//	myprintf(".........Drift...........\n\r");
	//	printQuatDrift(1);
	//Print Quaternions to Serial Port
	for (cnt = 0; cnt <= 1000;) {
		status = printQuatForDisplay();
		if (status == XST_SUCCESS) {
			//cnt++;
		}
		for (i = 0; i <= 10000; i++) {
			;
		}
	}
}

/*
 * Main
 */
int main() {
	//Variables
	int i = 0, cnt = 0, status;
	short int sensors = SENSORS_ALL;

	//Init Platform
	init_platform();

	//Print Output Separator
	myprintf("...............................\r\n");

//	//Quaternion Drift
//	myprintf(".........Drift...........\n\r");
//	printQuatDrift(1);

//Print Quaternions to Serial Port
	printQuatForImuViewer(cnt, status, i);

	//Get Data without DMP
	status = printDataWithoutDMP(&sensors, DATA_NO_DMP_RUNS);

	//Get Data with DMP without initial and DMP gyro calibration
	status = printDataUsingDMP(0, 0, DATA_WITH_DMP_RUNS);

	//Get Data with DMP with initial calibration but no DMP gyro calibration
	status = printDataUsingDMP(1, 0, DATA_WITH_DMP_RUNS);

	//Get Data with DMP with and DMP gyro calibration
	status = printDataUsingDMP(1, 1, DATA_WITH_DMP_RUNS);

	//Stay in here
	while (1) {
		;
	}

	//Finish
	cleanup_platform();
	return 0;
}

/*
 * Print Data using DMP
 * In: calibration, number of runs (if 0 --> endless loop)
 */
int printDataUsingDMP(char initialCalibration, char dmpCalibration,
		unsigned int numberOfRuns) {
	//Variables
	int status, i, cnt;

	//Calibrate if required
	if (initialCalibration) {
		myprintf(".........Calibration...........\n\r");
		status = calibrateGyrAcc();
		if (status != XST_SUCCESS) {
			myprintf("Calibration failed.\r\n");
			return status;
		} else {
			myprintf("Calibration done.\r\n");
		}
	}

	//En- or disable dynamic gyro calibration
	status = dmpGyroCalibration(dmpCalibration);
	if (status != XST_SUCCESS) {
		myprintf("Could not enable DMP dynamic gyro calibration.\r\n");
		return status;
	}

	//Get Data with DMP
	myprintf(".........With DMP...........\n\r");
	for (cnt = 0; cnt <= numberOfRuns; cnt++) {
		//Print
		status = printDataWithDMP();

		//Decrease count if not successful
		if (status != XST_SUCCESS || numberOfRuns == 0) {
			cnt--;
		}

		//Wait
		for (i = 0; i <= 10000; i++) {
			;
		}
	}

	//Return
	return XST_SUCCESS;
}

/*
 * Print Data without DMP
 * In: sensors, number of runs (if 0 --> endless loop)
 */
int printDataWithoutDMP(short int* sensors, unsigned int numberOfRuns) {
	//Variables
	int i, cnt, status;

	//Get Data without DMP
	myprintf(".........Without DMP...........\n\r");
	for (cnt = 0; cnt <= numberOfRuns; cnt++) {
		//Print
		status = printDataNoDMP(sensors);

		//Decrease count if not successful
		if (status != XST_SUCCESS || numberOfRuns < 1) {
			cnt--;
		}

		//Wait
		for (i = 0; i <= 10000; i++) {
			;
		}
	}
	return XST_SUCCESS;
}
