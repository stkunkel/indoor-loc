/*
 * timer.c: AXI Timer Control
 * Author: Stephanie Kunkel
 * Source: http://ece.gmu.edu/coursewebpages/ECE/ECE699_SW_HW/S15/viewgraphs/ECE699_lecture_4.pdf
 */

/*
 * Includes
 */
#include "timer.h"

/*
 * Global Vairables
 */
XTmrCtr tmrCtr;
static bool tmrExpired = BOOL_FALSE;

/*
 * Function Prototypes
 */
void TMR_Intr_Handler(void *InstancePtr);

/*
 * Is Timer Expired?
 */
bool isTimerExpired() {
	if (tmrExpired == BOOL_TRUE) {
		tmrExpired = BOOL_FALSE;
		return BOOL_TRUE;
	} else {
		return BOOL_FALSE;
	}
}

/*
 * Timer Interrupt Handler
 */
void tmrIntrHandler(void *InstancePtr) {
	if (XTmrCtr_IsExpired(&tmrCtr, 0)) {
		//Stop Timer Controller
		XTmrCtr_Stop(&tmrCtr, 0);

		//Set flag
		tmrExpired = BOOL_TRUE;

		//Reset Timer Controller
		XTmrCtr_Reset(&tmrCtr, 0);

		//Start Timer
		XTmrCtr_Start(&tmrCtr, 0);
	}
}

/*
 * Initialize Timer Interrupt
 */
int initTmrInt() {
	//Variables
	int status;

	//Initialize Timer Controller
	status = XTmrCtr_Initialize(&tmrCtr, TMR_DEVICE_ID);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	//Set Interrupt Handler for Timer Controller
	XTmrCtr_SetHandler(&tmrCtr, (XTmrCtr_Handler) tmrIntrHandler, &tmrCtr);

	//Reset Timer Value
	XTmrCtr_SetResetValue(&tmrCtr, 0, TMR_LOAD);

	//Set Options
	XTmrCtr_SetOptions(&tmrCtr, 0, TMR_OPTIONS);

	//Return
	return XST_SUCCESS;

}
