/*
 * quaternion->c
 *
 *  Created on: Nov 11, 2015
 *      Author: ruppi
 */

/*
 * Includes
 */
#include "quaternion.h"

/*
 * Functions
 */
/*
 * Get Quaterion Length
 */
float getQuaternionLength(Quaternion* quat){
	return sqrt(quat->w*quat->w + quat->x*quat->x + quat->y*quat->y + quat->z*quat->z);
}

/*
 * normalize Quaternion
 */
int normalizeQuaternion(struct Quaternion* quat){
	float length = getQuaternionLength(quat);

	quat->w = quat->w/length;
	quat->x = quat->x/length;
	quat->y = quat->y/length;
	quat->z = quat->z/length;

	return 0;
}

/*
 * Add Two Quaternions
 */
int addQuaternions(struct Quaternion* quat1, struct Quaternion* quat2, struct Quaternion* result){
	result->w = quat1->w + quat2->w;
	result->x = quat1->x + quat2->x;
	result->y = quat1->y + quat2->y;
	result->z = quat1->z + quat2->z;

	return 0;
}

/*
 * Substract Two Quaternions
 *
 * result = quat1 - quat2
 */
int substractQuaternions(struct Quaternion* quat1, struct Quaternion* quat2, struct Quaternion* result){
	result->w = quat1->w - quat2->w;
	result->x = quat1->x - quat2->x;
	result->y = quat1->y - quat2->y;
	result->z = quat1->z - quat2->z;

	return 0;
}

/*
 * Multiply Two Quaternions
 *
 * result = quat1 * quat2
 */
int multiplyQuaternions(struct Quaternion* quat1, struct Quaternion* quat2, struct Quaternion* result){
	result->w = quat1->w*quat2->w - quat1->x*quat2->x - quat1->y*quat2->y - quat1->z*quat2->z;
	result->x = quat1->w*quat2->x - quat1->x*quat2->w - quat1->y*quat2->z - quat1->z*quat2->y;
	result->y = quat1->w*quat2->y - quat1->x*quat2->z - quat1->y*quat2->w - quat1->z*quat2->x;
	result->z = quat1->w*quat2->z - quat1->x*quat2->y - quat1->y*quat2->x - quat1->z*quat2->w;

	return 0;
}
