/*
 * mpu.c
 *
 *  Created on: Nov 3, 2015
 *      Author: ruppi
 */

/*
 * Includes
 */
#include "mpu.h"

/*
 * Variables
 */
static u8 imuAddr = 0;
static char dmpReady = 0;

/*
 * Print Data using DMP
 */
int printDataWithDMP() {
	//Variables
	int status;
	unsigned short fifoRate;
	unsigned short int features;

	//Initialize IMU first if required
	if (imuAddr == 0) {
		status = initMPU();
		if (status != XST_SUCCESS) {
			return XST_FAILURE;
		}
	}

	//Load Firmware if not done already
	if (!dmpReady) {
		status = initDMP();
		if (status != XST_SUCCESS) {
			return XST_FAILURE;
		}
	}

	//Get enabled features
	status = dmp_get_enabled_features(&features);
	if (status == XST_SUCCESS) {
		printf("Enabled Features: 0x%X.\n\r", features);
	}

//	//Set FIFO rate
//	status = dmp_set_fifo_rate(100);
//	if (status != XST_SUCCESS) {
//		printf("mpu.c: Error Setting FIFO rate.\n\r");
//	}
//
//	//Get FIFO rate
//	status = dmp_get_fifo_rate(&fifoRate);
//	if (status == XST_SUCCESS) {
//		printf("FIFO rate: %dHz\n\r", fifoRate);
//	}

//Read FIFO
	short gyro, accel;
	long quat;
	unsigned long timestamp;
	short int sensors;
	unsigned char* more = (unsigned char *) malloc(100);
	do {
		status = dmp_read_fifo(&gyro, &accel, &quat, &timestamp, &sensors,
				more);
		if (status == XST_SUCCESS) {
			short quaternions[4];
			quaternions[0] = (quat & 0x000F);
			quaternions[1] = (quat & 0x00F0);
			quaternions[2] = (quat & 0x0F00);
			quaternions[3] = (quat & 0xF000);
			printf("Gyro: %d, Acc: %d, Quat: %d %d %d %d, \n\r", gyro, accel,
					quaternions[0], quaternions[1], quaternions[2],
					quaternions[3]);
		}
	} while (status != XST_SUCCESS);

	//Return
	return XST_SUCCESS;
}

/*
 * Print Data and don't use DMP
 */
int printDataNoDMP() {
	//Variables
	int status, i;
	long temp_raw;
	short raw[NUMBER_OF_AXES];
	float conv[NUMBER_OF_AXES], temp_conv;
	unsigned long temp_timestamp;
	unsigned long int timestamp;

	//Initialize IMU first if required
	if (imuAddr == 0) {
		status = initMPU();
		if (status != XST_SUCCESS) {
			printf("mpu.c: Error initializing IMU.\n\r");
			return XST_FAILURE;
		}
	}

	//Get Gyro
	status = mpu_get_gyro_reg(raw, &timestamp);
	if (status != XST_SUCCESS) {
		printf("mpu.c: Error getting Gyroscope data.\n\r");
		return XST_FAILURE;
	}

	//Convert Gyro
	status = convertGyroData(raw, conv);
	if (status != 0) {
		printf("mpu.c: Error converting Gyroscope data.\n\r");
		return XST_FAILURE;
	}

	//Print Gyro
	printf("Gyro: (");
	for (i = 0; i < NUMBER_OF_AXES; i++) {
		printf("%.6fdgr/s", conv[i]);
		if (i < NUMBER_OF_AXES - 1) {
			printf(", ");
		} else {
			printf(")| ");
		}
	}

	//Get Acc
	status = mpu_get_accel_reg(raw, &timestamp);
	if (status != 0) {
		printf("mpu.c: Error getting Acc data.\n\r");
		return XST_FAILURE;
	}

	//Convert Acc
	status = convertAccData(raw, conv);
	if (status != 0) {
		printf("mpu.c: Error converting Acc data.\n\r");
		return XST_FAILURE;
	}

	//Print Acc
	printf("Acc: (");
	for (i = 0; i < NUMBER_OF_AXES; i++) {
		printf("%.0fg", conv[i]);
		if (i < NUMBER_OF_AXES - 1) {
			printf(", ");
		} else {
			printf(") | ");
		}
	}

	//Get Compass
	status = mpu_get_compass_reg(raw, &timestamp);
	if (status != 0) {
		printf("mpu.c: Error getting Compass data.\n\r");
		return XST_FAILURE;
	}

	//Convert Compass
	status = convertCompassData(raw, conv);
	if (status != 0) {
		printf("mpu.c: Error converting Compass data.\n\r");
		return XST_FAILURE;
	}

	//Print Compass
	printf("Compass: (");
	for (i = 0; i < NUMBER_OF_AXES; i++) {
		printf("%.1fT", conv[i]);
		if (i < NUMBER_OF_AXES - 1) {
			printf(", ");
		} else {
			printf(") | ");
		}
	}

	//Get Temperature
	status = mpu_get_temperature(&temp_raw, &temp_timestamp);
	if (status != 0) {
		printf("mpu.c: Error getting Temperature data.\r\n");
		return XST_FAILURE;
	}

	//Convert Temperature
	status = convertTemperaturetoC(&temp_raw, &temp_conv);
	if (status != 0) {
		printf("mpu.c: Error converting Temperature data.\r\n");
		return XST_FAILURE;
	}

	//Print Temperature
	printf("Temperature: %.4fdgrC\r\n", temp_conv);

	//Return
	return XST_SUCCESS;
}

/*
 * Convert Gyroscope Data using Sensitivity
 */
int convertGyroData(short raw[NUMBER_OF_AXES], float converted[NUMBER_OF_AXES]) {
	//Variables
	int status, i;
	float sensitivity;

	//get sensitivity
	status = mpu_get_gyro_sens(&sensitivity);
	if (status != XST_SUCCESS) {
		printf("mpu.c: Error getting sensitivity of gyroscope.\r\n");
		return XST_FAILURE;
	}

	//convert data
	for (i = 0; i <= NUMBER_OF_AXES; i++) {
		converted[i] = raw[i] / sensitivity;
	}

	//Return
	return XST_SUCCESS;
}

/*
 * Convert Accelerometer Data using Sensitivity
 */
int convertAccData(short raw[NUMBER_OF_AXES], float converted[NUMBER_OF_AXES]) {
	//Variables
	int status, i;
	unsigned short sensitivity;

	//get sensitivity
	status = mpu_get_accel_sens(&sensitivity);
	if (status != XST_SUCCESS) {
		printf("mpu.c: Error getting sensitivity of gyroscope.\r\n");
		return XST_FAILURE;
	}

	//convert data
	for (i = 0; i <= NUMBER_OF_AXES; i++) {
		converted[i] = raw[i] / sensitivity * 1.0;
	}

	//Return
	return XST_SUCCESS;
}

/*
 * Convert Magnetometer Data using Sensitivity
 */
int convertCompassData(short raw[NUMBER_OF_AXES],
		float converted[NUMBER_OF_AXES]) {
	//Variables
	int i;

	//convert data
	for (i = 0; i <= NUMBER_OF_AXES; i++) {
		converted[i] = raw[i] * MAG_SENS_FRS_1200;
	}

	//Return
	return XST_SUCCESS;
}

int convertTemperaturetoC(long* raw, float* converted) {
	//convert data
	*converted = *raw / 65536.0;

	//Return
	return XST_SUCCESS;
}

/*
 * Init DMP
 */
int initDMP() {
	//Variables
	int status;

	//Load Firmware and set flag
	status = dmp_load_motion_driver_firmware();
	if (status != XST_SUCCESS) {
		dmpReady = 0;
		printf("mpu.c: Error loading firmware of DMP.\r\n");
		return XST_FAILURE;
	}

	//Dis- and Enable Features
	status = dmp_enable_lp_quat(0);
	if (status != XST_SUCCESS) {
		dmpReady = 0;
		printf("mpu.c: Error disabling 3-axis quaternions.\r\n");
		return XST_FAILURE;
	}

	status = dmp_enable_6x_lp_quat(1);
	if (status != XST_SUCCESS) {
		dmpReady = 0;
		printf("mpu.c: Error enabling 6-axis quaternions.\r\n");
		return XST_FAILURE;
	}

	//Set flag and return
	dmpReady = 1;
	return XST_SUCCESS;
}

/*
 * get IMU Address
 */
int getImuAddr(u8* addr) {
	if (imuAddr == 0) {
		initMPU();
	}
	*addr = imuAddr;
	return XST_SUCCESS;
}

/*
 * Initialize IMU
 */
int initMPU() {
	//Variables
	int status;

	//1. Init IMU (Set Address, etc.)
	status = imuInit(&imuAddr);
	if (status != XST_SUCCESS) {
		xil_printf("mpu.c: Error in Setting IMU Address.\n\r");
		return XST_FAILURE;
	}

	//2. Init IMU
	struct int_param_s param;
	status = mpu_init(&param);
	if (status != 0) {
		xil_printf("mpu.c: Error initializing IMU\r\n.");
		return XST_FAILURE;
	}

	//3. Select Sensors
	unsigned char sensors = SENSORS;
	mpu_set_sensors(sensors);
	if (status != 0) {
		xil_printf("mpu.c: Error setting sensors.\r\n");
		return XST_FAILURE;
	}

	//Return
	return XST_SUCCESS;
}
