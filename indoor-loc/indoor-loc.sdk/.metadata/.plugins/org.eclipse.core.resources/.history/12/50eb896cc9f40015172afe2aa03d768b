/*
 * robotCtrl.c: Robot control and movement data collection
 * Author: Stephanie Kunkel
 */

/*
 * Includes
 */
#include "robotCtrl.h"


/*
 * Collect Robot Movement Data
 * In: sample time (s), calibration time (s), bool whether to collect data and send it via UART or print directly to UART
 * Returns 0 if successful
 */
int collectRobotMvmtData(unsigned int sampleTime, unsigned int calibrationTime,
		bool collect) {
//Variables
	RobotMpuData data;
	uint32_t cnt = 0, samples = 0, angleid = 0, anglecnt = 0;
	int status;
	Joint joint = wrist;
	float angle[2];

//Set angles
	angle[0] = 0.0;
	angle[1] = 90.0;

//Compute number of data samples
	samples = sampleTime * FIFO_RATE;

//Reset Robot
	status = reset();
	if (status != PWM_SUCCESS) {
		return PWM_FAILURE;
	}

//Initialize IMU
	status = initIMU(calibrationTime);
	if (status != XST_SUCCESS) {
		printf("Could not initialize IMU.\r\n");
		return PWM_FAILURE;
	}

//Reset cnt
	cnt = 0;

//Get Samples
	while (cnt < samples) {

//Get Sensor Data
		while (needToUpdateData() == BOOL_FALSE) {
			usleep(1);
		}

		// Move Robot
		if (cnt % ((FIFO_RATE * HSS_422_TIME_FOR_90_DGRS) / 1000) == 0) {

			//Increase Angle Counter
			anglecnt++;

			//Check whether new angle should be set
			if (anglecnt >= STEPS_BEFORE_NEW_ANGLE) {

				//Reset Angle Counter
				anglecnt = 0;

				//Reset Angle ID
				if (angleid > 2) {
					angleid = 0;
				}

				//Set angle and increase ID
				setAngle(joint, angle[0]); //angleid
				toggleLed(ROBOT_MASK);
				angleid++;
			}
		}

		//Get PWM Data
		getPwmRegValues(data.pwmValues);

		//Read Sensor Data and write to memory
		status = readFromRegs(data.mpuData.gyro, data.mpuData.accel,
				data.mpuData.compass, &data.mpuData.temp, 0, SENSORS_ALL);

		//Read successful?
		if (status == XST_SUCCESS) {
			//LED Run
			if (cnt % FIFO_RATE == 0) {
				toggleLed(IMU_MASK);
			}

			//Collect Data in required
			if (collect == BOOL_TRUE) {

				//Store Values in buffer
				storeInBuff(&data);

			} else {
				//Update Data
				status = updateData();

				//Check whether data should be printed
				if (status == XST_SUCCESS) {
					if ((cnt % (FIFO_RATE / IMUVIEWER_FREQ)) == 0) {

						//Print
						status = printforDisplay(PRINT_FOR_VIEWER, " ");

						//Print new line
						if (status == XST_SUCCESS) {

							//Print new line
							printf("\n\r");
						}
					}
				}
			}

			//Increase Counter
			cnt++;

		} else if (status == XST_DEVICE_BUSY) {
			break;
		}
	}

//Reset Robot
	reset();

	//Transmit Buff
	status = transmitBuf();

//Return
	return status;
}
